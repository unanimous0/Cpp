/*
	Chapter 1    C++의 기초적인 사용법
	Chapter 1.11 헤더파일 만들기
*/

#include <iostream>

// 방식 1. 같은 파일 내에서 Declaration
// 경로상 같은 위치에 있는 "add.cpp 파일에 정의된 add 함수"를 이 파일에서 "선언"하면, 
// 아래 main 함수에서 사용 가능
// 그러나 사용할 때마다 선언할 수도 없으므로 비추 -> 헤더파일 사용 추천
int add(int a, int b);		// (Forward) Declaration

// 방식 2. 헤더파일 사용
// 헤더파일을 하나 만들어서 
// 경로상 같은 위치에 있는 "add.cpp 파일에 정의된 add 함수"를 "그 헤더파일에 선언"
// 그리고 #include로 그 헤더파일을 불러오면 됨
// ** 결론 -> 사용하려는 함수가 정의된 cpp 파일은 필요함 / 선언을 어디서 하냐의 차이
#include "add.h"

// 방식 2-1. 다른 경로에 있는 헤더파일 사용 (헤더파일만 모아두는 경로 등)
// 단, 같은 프로젝트 내에 있어야 하는 듯
// Step 1. "add.cpp 파일에 정의된 add 함수"가 선언되어 있는 헤더파일을 만듦
// Step 2. 이 헤더파일을 헤더파일만 모아두는 (같은 프로젝트 내의) 경로 등 원하는 경로에 옮김
// Step 3. 이 헤더파일을 이 프로젝트의 "Header Files" 목록에 추가 (마우스로 드래그 함) -> 안하면 파일을 찾을 수 없다고 함
// Step 4. 경로를 포함한 헤더파일이름으로 #include로 호출
#include "HeadersArchive/addInMyHeadersFolder.h"

// 추가
// 헤더파일에 body를 포함해도 문제 없음 (즉, 선언만 하는게 아니라 정의를 해도 문제 없음)
// 이러면 따로 cpp 파일을 만들지 않아도 되는 것
// ** 그러나 가급적이면 cpp 파일을 만드는 것을 권장
// *** 나중에 클래스를 main에 같이 작성하기보단, 대부분 헤더와 cpp 파일로 구분해서 사용함

int main1_11()
{
	// 위의 방식들을 하나씩 테스트 하는 경우, 나머지 방식들을 주석처리 해놓고 실행해야함
	std::cout << add(1, 2) << std::endl;
	
	return 0;
} 
